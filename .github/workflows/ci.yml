name: Build
on:
  push:
    tags: ["v*"]
    branches: ["main"]
  pull_request:
    branches: ["*"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin' 
          java-version: '17'
          cache: sbt

      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/sbt-vcpkg/vcpkg
            ~/.cache/sbt-vcpkg/vcpkg
            ~/.cache/sbt-vcpkg/vcpkg-install
          key: ${{ runner.os }}-sbt-vcpkg-new
          
      - uses: rui314/setup-mold@v1

      - name: Setup Postgres
        run: |
          set -e
          docker run -p 5432:5432 -e POSTGRES_PASSWORD=mysecretpassword -e POSTGRES_DB=twotm8 -d postgres

      - name: Install Unit development libraries 
        run: |
          UNIT_VERSION=1.31.1

          curl -O https://unit.nginx.org/download/unit-$UNIT_VERSION.tar.gz && tar xzf unit-$UNIT_VERSION.tar.gz
          mv unit-$UNIT_VERSION unit
          cd unit && \
              ./configure --no-ipv6 --no-regex --log=/dev/stderr --user=$(whoami) --group=$(id -g -n) --statedir=statedir && \
              make build/sbin/unitd && \
              make build/lib/libunit.a && \
              install -p build/lib/libunit.a /usr/local/lib/libunit.a && \
              mv build/sbin/unitd /usr/sbin/unitd


      - name: Tests and build app
        run: sbt nativeTests buildApp

      - name: Integration tests 
        run: |
          # ls -R ./build
          # sudo chown -R unit:unit build
          sudo chmod -R 0777 build
          cd build && unitd --statedir statedir --log /dev/stderr --no-daemon --control 127.0.0.1:9000 --user $(whoami) --group $(id -g -n)

  release:
    name: Release
    needs: [build]
    runs-on: ubuntu-20.04
    if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin' 
          java-version: '17'
          cache: sbt

      - name: Publish ${{ github.ref }}
        run: sbt ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}

  docker-build:
    name: Docker build
    runs-on: ubuntu-20.04
    if: "!(startsWith(github.ref, 'refs/tags/v') || (github.ref == 'refs/heads/main'))"
    steps:
      - uses: actions/checkout@v3

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Build 
        run: docker build . -t twotm8

  mergify_build_summary:
    name: Build summary
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    steps:
      - name: I only exist to please Mergify :(
        run: echo "It's a sad existence but necessary"

  deploy-staging:
    name: Deploy staging
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v') || (github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin' 
          java-version: '17'
          cache: sbt

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to fly.io
        run: "flyctl deploy -c fly-staging.toml"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: End to end tests  
        run: sbt stagingIntegrationTests 

  deploy-production:
    name: Deploy production
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 
        with:
          fetch-depth: 0

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to fly.io
        run: "flyctl deploy -c fly-production.toml"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
